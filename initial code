#include <mcp_can.h>  // library for MCP2515 ic
#include <SPI.h>      // library for SPI communication

long unsigned int rxId;  // storage for can data
unsigned char len = 0;   // storage for can data
unsigned char rxBuf[8];  // storage for can data

#define CAN0_INT 3  // Set INT to pin 2 for CAN interface 0
MCP_CAN CAN0(10);   // set CS pin to 10 for CAN interface 0

bool park_on = 1; // boolean for keep track of park light on and off

// Bool and bytes for the ignition switch 
bool sleutel, klem15, starter;
byte mBSG_byte = 0;
byte mBSG_3    = 0;

void setup() {
  // start serial port an send a message with delay for starting
  Serial.begin(115200);
  delay(50);

  // initialize canbus with 1000kbit and 16mhz xtal
  CAN0.begin(MCP_ANY, CAN_100KBPS, MCP_16MHZ);
  CAN0.setMode(MCP_NORMAL);

  pinMode(CAN0_INT, INPUT);      // set INT pin to be an input
  digitalWrite(CAN0_INT, HIGH);  // set INT pin high to enable interna pullup


}

void loop() {

  if (!digitalRead(CAN0_INT))  // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);  // Read data: len = data length, buf = data byte(s)
    canRead(); // execute canRead function to negotiate with ecu
  }
  


}




void canRead(){
    if (rxId == 0x2c3)
    {
      sleutel = bitRead(rxBuf[0], 0);
      klem15  = bitRead(rxBuf[0], 1);
      starter = bitRead(rxBuf[0], 3); 
   }

      byte mBSG_3[4] = { mBSG_byte, 0x00, 0x00, 0x00};
      if (sleutel == 1) {bitSet(mBSG_byte,0);} else {bitClear(mBSG_byte,0);}
      if (klem15  == 1) {bitSet(mBSG_byte,1);} else {bitClear(mBSG_byte,1);}
      CAN0.sendMsgBuf(0x575, 0, 4, mBSG_3);  // send the can message onto the bus


      byte mDimmung[3] = {0x00, 0x00, 0x00};
      if (park_on == 0) {mDimmung[0] = 0, mDimmung[1] = 0;}
      if (park_on == 1) {mDimmung[0] = 100, mDimmung[1] = 100;}
      CAN0.sendMsgBuf(0x635, 0, 3, mDimmung);  // send the can message onto the bus

    }
